import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";
import type { FilterArrayByValue, MapSchemaParameters, PickDefined, NeverIfEmpty, UndefinedToOptional, PathParamNames, SetPropsOptionalIfChildrenAreOptional, ReadonlyDeep, Merge, MergeUnion, FilterArrayByKey, IfEquals } from "./utils.types";
import z from "zod";
export declare type MutationMethod = "post" | "put" | "patch" | "delete";
export declare type Method = "get" | "head" | "options" | MutationMethod;
export declare type RequestFormat = "json" | "form-data" | "form-url" | "binary" | "text";
declare type MethodApiDescription<Api extends unknown[], M extends Method> = FilterArrayByValue<Api, {
    method: M;
}>;
export declare type EndpointApiDescription<Api extends unknown[], M extends Method, Path> = FilterArrayByValue<Api, {
    method: M;
    path: Path;
}>;
export declare type AliasEndpointApiDescription<Api extends unknown[], Alias extends string> = FilterArrayByValue<Api, {
    alias: Alias;
}>;
export declare type Paths<Api extends unknown[], M extends Method> = MethodApiDescription<Api, M>[number]["path"];
export declare type Aliases<Api extends unknown[]> = FilterArrayByKey<Api, "alias">[number]["alias"];
export declare type Response<Api extends unknown[], M extends Method, Path> = z.infer<EndpointApiDescription<Api, M, Path>[number]["response"]>;
export declare type ResponseByAlias<Api extends unknown[], Alias extends string> = z.infer<AliasEndpointApiDescription<Api, Alias>[number]["response"]>;
declare type DefaultError<Api extends unknown[], M extends Method, Path> = FilterArrayByValue<EndpointApiDescription<Api, M, Path>[number]["errors"], {
    status: "default";
}>[number]["schema"];
declare type DefaultErrorByAlias<Api extends unknown[], Alias extends string> = FilterArrayByValue<AliasEndpointApiDescription<Api, Alias>[number]["errors"], {
    status: "default";
}>[number]["schema"];
declare type IfNever<E, A> = IfEquals<E, never, A, E>;
export declare type EndpointError<Api extends unknown[], M extends Method, Path, Status extends number> = z.input<IfNever<FilterArrayByValue<EndpointApiDescription<Api, M, Path>[number]["errors"], {
    status: Status;
}>[number]["schema"], DefaultError<Api, M, Path>>>;
export declare type EndpointErrorByAlias<Api extends unknown[], Alias extends string, Status extends number> = z.input<IfNever<FilterArrayByValue<AliasEndpointApiDescription<Api, Alias>[number]["errors"], {
    status: Status;
}>[number]["schema"], DefaultErrorByAlias<Api, Alias>>>;
export declare type BodySchema<Api extends unknown[], M extends Method, Path> = FilterArrayByValue<EndpointApiDescription<Api, M, Path>[number]["parameters"], {
    type: "Body";
}>[number]["schema"];
export declare type Body<Api extends unknown[], M extends Method, Path> = z.input<BodySchema<Api, M, Path>>;
export declare type BodySchemaByAlias<Api extends unknown[], Alias extends string> = FilterArrayByValue<AliasEndpointApiDescription<Api, Alias>[number]["parameters"], {
    type: "Body";
}>[number]["schema"];
export declare type BodyByAlias<Api extends unknown[], Alias extends string> = z.input<BodySchemaByAlias<Api, Alias>>;
export declare type QueryParams<Api extends unknown[], M extends Method, Path> = NeverIfEmpty<UndefinedToOptional<MapSchemaParameters<FilterArrayByValue<EndpointApiDescription<Api, M, Path>[number]["parameters"], {
    type: "Query";
}>>>>;
export declare type QueryParamsByAlias<Api extends unknown[], Alias extends string> = NeverIfEmpty<UndefinedToOptional<MapSchemaParameters<FilterArrayByValue<AliasEndpointApiDescription<Api, Alias>[number]["parameters"], {
    type: "Query";
}>>>>;
export declare type PathParams<Path extends string> = NeverIfEmpty<Record<PathParamNames<Path>, string | number>>;
export declare type PathParamByAlias<Api extends unknown[], Alias extends string> = NeverIfEmpty<Record<PathParamNames<AliasEndpointApiDescription<Api, Alias>[number]["path"]>, string | number>>;
export declare type HeaderParams<Api extends unknown[], M extends Method, Path> = NeverIfEmpty<UndefinedToOptional<MapSchemaParameters<FilterArrayByValue<EndpointApiDescription<Api, M, Path>[number]["parameters"], {
    type: "Header";
}>>>>;
export declare type HeaderParamsByAlias<Api extends unknown[], Alias extends string> = NeverIfEmpty<UndefinedToOptional<MapSchemaParameters<FilterArrayByValue<AliasEndpointApiDescription<Api, Alias>[number]["parameters"], {
    type: "Header";
}>>>>;
export declare type ZodiosConfigByAlias<Api extends unknown[], Alias extends string> = Merge<SetPropsOptionalIfChildrenAreOptional<PickDefined<{
    params: PathParamByAlias<Api, Alias>;
    queries: QueryParamsByAlias<Api, Alias>;
    headers: HeaderParamsByAlias<Api, Alias>;
}>>, Omit<AxiosRequestConfig, "params" | "baseURL" | "data" | "method" | "url">>;
export declare type ZodiosAliases<Api extends unknown[]> = MergeUnion<Aliases<Api> extends infer Aliases ? Aliases extends string ? {
    [Alias in Aliases]: AliasEndpointApiDescription<Api, Alias>[number]["method"] extends MutationMethod ? (data?: ReadonlyDeep<BodyByAlias<Api, Alias>>, configOptions?: ReadonlyDeep<ZodiosConfigByAlias<Api, Alias>>) => Promise<ResponseByAlias<Api, Alias>> : (configOptions?: ReadonlyDeep<ZodiosConfigByAlias<Api, Alias>>) => Promise<ResponseByAlias<Api, Alias>>;
} : never : never>;
export declare type AnyZodiosMethodOptions = Merge<{
    params?: Record<string, unknown>;
    queries?: Record<string, unknown>;
    headers?: Record<string, string>;
}, Omit<AxiosRequestConfig, "params" | "headers" | "baseURL" | "url" | "method">>;
export declare type AnyZodiosRequestOptions = Merge<{
    method: Method;
    url: string;
}, AnyZodiosMethodOptions>;
export declare type ZodiosMethodOptions<Api extends unknown[], M extends Method, Path extends string> = Merge<SetPropsOptionalIfChildrenAreOptional<PickDefined<{
    params: PathParams<Path>;
    queries: QueryParams<Api, M, Path>;
    headers: HeaderParams<Api, M, Path>;
}>>, Omit<AxiosRequestConfig, "params" | "baseURL" | "data" | "method" | "url">>;
export declare type ZodiosRequestOptions<Api extends unknown[], M extends Method, Path extends string> = Merge<{
    method: M;
    url: Path;
    data?: Body<Api, M, Path>;
}, ZodiosMethodOptions<Api, M, Path>>;
export declare type AxiosRetryRequestConfig = AxiosRequestConfig & {
    retried?: boolean;
};
/**
 * Zodios options
 */
export declare type ZodiosOptions = {
    /**
     * Should zodios validate the response? Default: true
     * @deprecated use `validate` instead
     */
    validateResponse?: boolean;
    /**
     * Should zodios validate parameters and response? Default: true
     */
    validate?: boolean;
    /**
     * Override the default axios instance. Default: zodios will create it's own axios instance
     */
    axiosInstance?: AxiosInstance;
    /**
     * default config for axios requests
     */
    axiosConfig?: AxiosRequestConfig;
};
export declare type ZodiosEndpointParameter<T = unknown> = {
    /**
     * name of the parameter
     */
    name: string;
    /**
     * optional description of the parameter
     */
    description?: string;
    /**
     * type of the parameter: Query, Body, Header
     */
    type: "Query" | "Body" | "Header";
    /**
     * zod schema of the parameter
     * you can use zod `transform` to transform the value of the parameter before sending it to the server
     */
    schema: z.ZodType<T>;
};
export declare type ZodiosEndpointParameters = ZodiosEndpointParameter[];
export declare type ZodiosEndpointError<T = unknown> = {
    /**
     * status code of the error
     * use 'default' to declare a default error
     */
    status: number | "default";
    /**
     * description of the error - used to generate the openapi error description
     */
    description?: string;
    /**
     * schema of the error
     */
    schema: z.ZodType<T>;
};
export declare type ZodiosEndpointErrors = ZodiosEndpointError[];
/**
 * Zodios enpoint definition that should be used to create a new instance of Zodios
 */
export declare type ZodiosEndpointDescription<R = unknown> = {
    /**
     * http method : get, post, put, patch, delete
     */
    method: Method;
    /**
     * path of the endpoint
     * @example
     * ```text
     * /posts/:postId/comments/:commentId
     * ```
     */
    path: string;
    /**
     * optional alias to call the endpoint easily
     * @example
     * ```text
     * getPostComments
     * ```
     */
    alias?: string;
    /**
     * optional description of the endpoint
     */
    description?: string;
    /**
     * optional request format of the endpoint: json, form-data, form-url, binary, text
     */
    requestFormat?: RequestFormat;
    /**
     * optionally mark the endpoint as immutable to allow zodios to cache the response with react-query
     * use it to mark a 'post' endpoint as immutable
     */
    immutable?: boolean;
    /**
     * optional parameters of the endpoint
     */
    parameters?: Array<ZodiosEndpointParameter>;
    /**
     * response of the endpoint
     * you can use zod `transform` to transform the value of the response before returning it
     */
    response: z.ZodType<R>;
    /**
     * optional errors of the endpoint - only usefull when using @zodios/express
     */
    errors?: Array<ZodiosEndpointError>;
};
export declare type ZodiosEnpointDescriptions = ZodiosEndpointDescription[];
/**
 * Zodios plugin that can be used to intercept zodios requests and responses
 */
export declare type ZodiosPlugin = {
    /**
     * Optional name of the plugin
     * naming a plugin allows to remove it or replace it later
     */
    name?: string;
    /**
     * request interceptor to modify or inspect the request before it is sent
     * @param api - the api description
     * @param request - the request config
     * @returns possibly a new request config
     */
    request?: (api: ZodiosEnpointDescriptions, config: ReadonlyDeep<AnyZodiosRequestOptions>) => Promise<ReadonlyDeep<AnyZodiosRequestOptions>>;
    /**
     * response interceptor to modify or inspect the response before it is returned
     * @param api - the api description
     * @param config - the request config
     * @param response - the response
     * @returns possibly a new response
     */
    response?: (api: ZodiosEnpointDescriptions, config: ReadonlyDeep<AnyZodiosRequestOptions>, response: AxiosResponse) => Promise<AxiosResponse>;
    /**
     * error interceptor for response errors
     * there is no error interceptor for request errors
     * @param api - the api description
     * @param config - the config for the request
     * @param error - the error that occured
     * @returns possibly a new response or a new error
     */
    error?: (api: ZodiosEnpointDescriptions, config: ReadonlyDeep<AnyZodiosRequestOptions>, error: Error) => Promise<AxiosResponse>;
};
export {};
