/**
 * Custom Zodios Error with additional information
 * @param message - the error message
 * @param data - the parameter or response object that caused the error
 * @param config - the config object from zodios
 * @param cause - the error cause
 */
export declare class ZodiosError extends Error {
    readonly config?: import("./utils.types").DeepReadonlyObject<{
        method: import("./zodios.types").Method;
        url: string;
        params?: Record<string, unknown> | undefined;
        queries?: Record<string, unknown> | undefined;
        headers?: Record<string, string> | undefined;
        signal?: AbortSignal | undefined;
        data?: any;
        auth?: import("axios").AxiosBasicCredentials | undefined;
        timeout?: number | undefined;
        transformRequest?: import("axios").AxiosRequestTransformer | import("axios").AxiosRequestTransformer[] | undefined;
        transformResponse?: import("axios").AxiosResponseTransformer | import("axios").AxiosResponseTransformer[] | undefined;
        paramsSerializer?: ((params: any) => string) | undefined;
        timeoutErrorMessage?: string | undefined;
        withCredentials?: boolean | undefined;
        adapter?: import("axios").AxiosAdapter | undefined;
        responseType?: import("axios").ResponseType | undefined;
        responseEncoding?: string | undefined;
        xsrfCookieName?: string | undefined;
        xsrfHeaderName?: string | undefined;
        onUploadProgress?: ((progressEvent: any) => void) | undefined;
        onDownloadProgress?: ((progressEvent: any) => void) | undefined;
        maxContentLength?: number | undefined;
        validateStatus?: ((status: number) => boolean) | null | undefined;
        maxBodyLength?: number | undefined;
        maxRedirects?: number | undefined;
        beforeRedirect?: ((options: Record<string, any>, responseDetails: {
            headers: Record<string, string>;
        }) => void) | undefined;
        socketPath?: string | null | undefined;
        httpAgent?: any;
        httpsAgent?: any;
        proxy?: false | import("axios").AxiosProxyConfig | undefined;
        cancelToken?: import("axios").CancelToken | undefined;
        decompress?: boolean | undefined;
        transitional?: import("axios").TransitionalOptions | undefined;
        insecureHTTPParser?: boolean | undefined;
        env?: {
            FormData?: (new (...args: any[]) => object) | undefined;
        } | undefined;
    }> | undefined;
    readonly data?: unknown;
    readonly cause?: Error | undefined;
    constructor(message: string, config?: import("./utils.types").DeepReadonlyObject<{
        method: import("./zodios.types").Method;
        url: string;
        params?: Record<string, unknown> | undefined;
        queries?: Record<string, unknown> | undefined;
        headers?: Record<string, string> | undefined;
        signal?: AbortSignal | undefined;
        data?: any;
        auth?: import("axios").AxiosBasicCredentials | undefined;
        timeout?: number | undefined;
        transformRequest?: import("axios").AxiosRequestTransformer | import("axios").AxiosRequestTransformer[] | undefined;
        transformResponse?: import("axios").AxiosResponseTransformer | import("axios").AxiosResponseTransformer[] | undefined;
        paramsSerializer?: ((params: any) => string) | undefined;
        timeoutErrorMessage?: string | undefined;
        withCredentials?: boolean | undefined;
        adapter?: import("axios").AxiosAdapter | undefined;
        responseType?: import("axios").ResponseType | undefined;
        responseEncoding?: string | undefined;
        xsrfCookieName?: string | undefined;
        xsrfHeaderName?: string | undefined;
        onUploadProgress?: ((progressEvent: any) => void) | undefined;
        onDownloadProgress?: ((progressEvent: any) => void) | undefined;
        maxContentLength?: number | undefined;
        validateStatus?: ((status: number) => boolean) | null | undefined;
        maxBodyLength?: number | undefined;
        maxRedirects?: number | undefined;
        beforeRedirect?: ((options: Record<string, any>, responseDetails: {
            headers: Record<string, string>;
        }) => void) | undefined;
        socketPath?: string | null | undefined;
        httpAgent?: any;
        httpsAgent?: any;
        proxy?: false | import("axios").AxiosProxyConfig | undefined;
        cancelToken?: import("axios").CancelToken | undefined;
        decompress?: boolean | undefined;
        transitional?: import("axios").TransitionalOptions | undefined;
        insecureHTTPParser?: boolean | undefined;
        env?: {
            FormData?: (new (...args: any[]) => object) | undefined;
        } | undefined;
    }> | undefined, data?: unknown, cause?: Error | undefined);
}
