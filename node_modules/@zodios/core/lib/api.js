"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asCrudApi = exports.makeCrudApi = exports.apiBuilder = exports.Builder = exports.makeEndpoint = exports.asErrors = exports.makeErrors = exports.asParameters = exports.makeParameters = exports.asApi = exports.makeApi = exports.checkApi = void 0;
const zod_1 = __importDefault(require("zod"));
const utils_1 = require("./utils");
/**
 * check api for non unique paths
 * @param api - api to check
 * @return - nothing
 * @throws - error if api has non unique paths
 */
function checkApi(api) {
    const paths = new Set();
    for (let endpoint of api) {
        const fullpath = `${endpoint.method} ${endpoint.path}`;
        if (paths.has(fullpath)) {
            throw new Error(`Zodios: Duplicate path '${fullpath}'`);
        }
        paths.add(fullpath);
    }
}
exports.checkApi = checkApi;
/**
 * Simple helper to split your api definitions into multiple files
 * Mandatory to be used when declaring your endpoint definitions outside zodios constructor
 * to enable type inferrence and autocompletion
 * @param api - api definitions
 * @returns the api definitions
 */
function makeApi(api) {
    checkApi(api);
    return api;
}
exports.makeApi = makeApi;
/**
 * Simple helper to split your api definitions into multiple files
 * Mandatory to be used when declaring your endpoint definitions outside zodios constructor
 * to enable type inferrence and autocompletion
 * @param api - api definitions
 * @returns the api definitions
 * @deprecated - use makeApi instead
 */
exports.asApi = makeApi;
/**
 * Simple helper to split your parameter definitions into multiple files
 * Mandatory to be used when declaring parameters appart from your endpoint definitions
 * to enable type inferrence and autocompletion
 * @param params - api parameter definitions
 * @returns the api parameter definitions
 */
function makeParameters(params) {
    return params;
}
exports.makeParameters = makeParameters;
/**
 * Simple helper to split your parameter definitions into multiple files
 * Mandatory to be used when declaring parameters appart from your endpoint definitions
 * to enable type inferrence and autocompletion
 * @param params - api parameter definitions
 * @returns the api parameter definitions
 * @deprecated - use makeParameters instead
 */
exports.asParameters = makeParameters;
/**
 * Simple helper to split your error definitions into multiple files
 * Mandatory to be used when declaring errors appart from your endpoint definitions
 * to enable type inferrence and autocompletion
 * @param errors - api error definitions
 * @returns the error definitions
 */
function makeErrors(errors) {
    return errors;
}
exports.makeErrors = makeErrors;
/**
 * Simple helper to split your error definitions into multiple files
 * Mandatory to be used when declaring errors appart from your endpoint definitions
 * to enable type inferrence and autocompletion
 * @param errors - api error definitions
 * @returns the error definitions
 * @deprecated - use makeErrors instead
 */
exports.asErrors = makeErrors;
function makeEndpoint(endpoint) {
    return endpoint;
}
exports.makeEndpoint = makeEndpoint;
class Builder {
    constructor(api) {
        this.api = api;
    }
    addEndpoint(endpoint) {
        return new Builder([...this.api, endpoint]);
    }
    build() {
        checkApi(this.api);
        return this.api;
    }
}
exports.Builder = Builder;
/**
 * Advanced helper to build your api definitions
 * compared to `asApi()` you'll have better autocompletion experience and better error messages,
 * @param endpoint
 * @returns - a builder to build your api definitions
 */
function apiBuilder(endpoint) {
    return new Builder([endpoint]);
}
exports.apiBuilder = apiBuilder;
/**
 * Helper to generate a basic CRUD api for a given resource
 * @param resource - the resource to generate the api for
 * @param schema - the schema of the resource
 * @returns - the api definitions
 */
function makeCrudApi(resource, schema) {
    const capitalizedResource = (0, utils_1.capitalize)(resource);
    return makeApi([
        {
            method: "get",
            // @ts-expect-error
            path: `/${resource}s`,
            // @ts-expect-error
            alias: `get${capitalizedResource}s`,
            description: `Get all ${resource}s`,
            response: zod_1.default.array(schema),
        },
        {
            method: "get",
            // @ts-expect-error
            path: `/${resource}s/:id`,
            // @ts-expect-error
            alias: `get${capitalizedResource}`,
            description: `Get a ${resource}`,
            // @ts-expect-error
            response: schema,
        },
        {
            method: "post",
            // @ts-expect-error
            path: `/${resource}s`,
            // @ts-expect-error
            alias: `create${capitalizedResource}`,
            description: `Create a ${resource}`,
            parameters: [
                {
                    name: "body",
                    type: "Body",
                    description: "The object to create",
                    schema: schema.partial(),
                },
            ],
            // @ts-expect-error
            response: schema,
        },
        {
            method: "put",
            // @ts-expect-error
            path: `/${resource}s/:id`,
            // @ts-expect-error
            alias: `update${capitalizedResource}`,
            description: `Update a ${resource}`,
            parameters: [
                {
                    name: "body",
                    type: "Body",
                    description: "The object to update",
                    // @ts-expect-error
                    schema: schema,
                },
            ],
            // @ts-expect-error
            response: schema,
        },
        {
            method: "patch",
            // @ts-expect-error
            path: `/${resource}s/:id`,
            // @ts-expect-error
            alias: `patch${capitalizedResource}`,
            description: `Patch a ${resource}`,
            parameters: [
                {
                    name: "body",
                    type: "Body",
                    description: "The object to patch",
                    schema: schema.partial(),
                },
            ],
            // @ts-expect-error
            response: schema,
        },
        {
            method: "delete",
            // @ts-expect-error
            path: `/${resource}s/:id`,
            // @ts-expect-error
            alias: `delete${capitalizedResource}`,
            description: `Delete a ${resource}`,
            // @ts-expect-error
            response: schema,
        },
    ]);
}
exports.makeCrudApi = makeCrudApi;
/**
 * Helper to generate a basic CRUD api for a given resource
 * @param resource - the resource to generate the api for
 * @param schema - the schema of the resource
 * @returns - the api definitions
 * @deprecated use makeCrudApi instead
 */
exports.asCrudApi = makeCrudApi;
