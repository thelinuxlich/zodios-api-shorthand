"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zodios = exports.ZodiosClass = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
const plugins_1 = require("./plugins");
const api_1 = require("./api");
/**
 * zodios api client based on axios
 */
class ZodiosClass {
    constructor(...args) {
        this.endpointPlugins = new Map();
        if (!args[0]) {
            if (Array.isArray(args[1])) {
                throw new Error("Zodios: missing base url");
            }
            throw new Error("Zodios: missing api description");
        }
        let baseURL;
        if (typeof args[0] === "string") {
            [baseURL, ...args] = args;
        }
        this.api = args[0];
        if (!Array.isArray(this.api)) {
            throw new Error("Zodios: api must be an array");
        }
        (0, api_1.checkApi)(this.api);
        this.options = Object.assign({ validate: true, validateResponse: true }, args[1]);
        if (this.options.axiosInstance) {
            this.axiosInstance = this.options.axiosInstance;
        }
        else {
            this.axiosInstance = axios_1.default.create(Object.assign({}, this.options.axiosConfig));
        }
        if (baseURL)
            this.axiosInstance.defaults.baseURL = baseURL;
        this.injectAliasEndpoints();
        this.initPlugins();
        if (this.options.validate && this.options.validateResponse) {
            this.use((0, plugins_1.zodValidationPlugin)());
        }
    }
    initPlugins() {
        this.endpointPlugins.set("any-any", new plugins_1.ZodiosPlugins("any", "any"));
        this.api.forEach((endpoint) => {
            const plugins = new plugins_1.ZodiosPlugins(endpoint.method, endpoint.path);
            switch (endpoint.requestFormat) {
                case "binary":
                    plugins.use((0, plugins_1.headerPlugin)("Content-Type", "application/octet-stream"));
                    break;
                case "form-data":
                    plugins.use((0, plugins_1.formDataPlugin)());
                    break;
                case "form-url":
                    plugins.use((0, plugins_1.formURLPlugin)());
                    break;
                case "text":
                    plugins.use((0, plugins_1.headerPlugin)("Content-Type", "text/plain"));
                    break;
            }
            this.endpointPlugins.set(`${endpoint.method}-${endpoint.path}`, plugins);
        });
    }
    getAnyEndpointPlugins() {
        return this.endpointPlugins.get("any-any");
    }
    findAliasEndpointPlugins(alias) {
        const endpoint = this.api.find((endpoint) => endpoint.alias === alias);
        if (endpoint) {
            return this.endpointPlugins.get(`${endpoint.method}-${endpoint.path}`);
        }
        return undefined;
    }
    findEnpointPlugins(method, path) {
        return this.endpointPlugins.get(`${method}-${path}`);
    }
    /**
     * get the base url of the api
     */
    get baseURL() {
        return this.axiosInstance.defaults.baseURL;
    }
    /**
     * get the underlying axios instance
     */
    get axios() {
        return this.axiosInstance;
    }
    use(...args) {
        if (typeof args[0] === "object") {
            const plugins = this.getAnyEndpointPlugins();
            return plugins.use(args[0]);
        }
        else if (typeof args[0] === "string" && typeof args[1] === "object") {
            const plugins = this.findAliasEndpointPlugins(args[0]);
            if (!plugins)
                throw new Error(`Zodios: no alias '${args[0]}' found to register plugin`);
            return plugins.use(args[1]);
        }
        else if (typeof args[0] === "string" &&
            typeof args[1] === "string" &&
            typeof args[2] === "object") {
            const plugins = this.findEnpointPlugins(args[0], args[1]);
            if (!plugins)
                throw new Error(`Zodios: no endpoint '${args[0]} ${args[1]}' found to register plugin`);
            return plugins.use(args[2]);
        }
        throw new Error("Zodios: invalid plugin registration");
    }
    /**
     * unregister a plugin
     * if the plugin name is provided instead of the registration plugin id,
     * it will unregister the plugin with that name only for non endpoint plugins
     * @param plugin - id of the plugin to remove
     */
    eject(plugin) {
        var _a;
        if (typeof plugin === "string") {
            const plugins = this.getAnyEndpointPlugins();
            plugins.eject(plugin);
            return;
        }
        (_a = this.endpointPlugins.get(plugin.key)) === null || _a === void 0 ? void 0 : _a.eject(plugin);
    }
    injectAliasEndpoints() {
        this.api.forEach((endpoint) => {
            if (endpoint.alias) {
                if (["post", "put", "patch", "delete"].includes(endpoint.method)) {
                    this[endpoint.alias] = (data, config) => this.request(Object.assign(Object.assign({}, config), { method: endpoint.method, url: endpoint.path, data }));
                }
                else {
                    this[endpoint.alias] = (config) => this.request(Object.assign(Object.assign({}, config), { method: endpoint.method, url: endpoint.path }));
                }
            }
        });
    }
    /**
     * make a request to the api
     * @param config - the config to setup zodios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    request(config) {
        return __awaiter(this, void 0, void 0, function* () {
            let conf = config;
            const anyPlugin = this.getAnyEndpointPlugins();
            const endpointPlugin = this.findEnpointPlugins(conf.method, conf.url);
            conf = yield anyPlugin.interceptRequest(this.api, conf);
            if (endpointPlugin) {
                conf = yield endpointPlugin.interceptRequest(this.api, conf);
            }
            const requestConfig = Object.assign(Object.assign({}, (0, utils_1.omit)(conf, ["params", "queries"])), { url: (0, utils_1.replacePathParams)(conf), params: conf.queries });
            let response = this.axiosInstance.request(requestConfig);
            if (endpointPlugin) {
                response = endpointPlugin.interceptResponse(this.api, conf, response);
            }
            response = anyPlugin.interceptResponse(this.api, conf, response);
            return (yield response).data;
        });
    }
    /**
     * make a get request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    get(path, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(Object.assign(Object.assign({}, config), { method: "get", url: path }));
        });
    }
    /**
     * make a post request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    post(path, data, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(Object.assign(Object.assign({}, config), { method: "post", url: path, data }));
        });
    }
    /**
     * make a put request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    put(path, data, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(Object.assign(Object.assign({}, config), { method: "put", url: path, data }));
        });
    }
    /**
     * make a patch request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    patch(path, data, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(Object.assign(Object.assign({}, config), { method: "patch", url: path, data }));
        });
    }
    /**
     * make a delete request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    delete(path, data, config) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(Object.assign(Object.assign({}, config), { method: "delete", url: path, data }));
        });
    }
}
exports.ZodiosClass = ZodiosClass;
exports.Zodios = ZodiosClass;
