import { AxiosInstance } from "axios";
import { ZodiosRequestOptions, Body, Method, Paths, Response, ZodiosOptions, ZodiosEnpointDescriptions, ZodiosMethodOptions, ZodiosAliases, ZodiosPlugin } from "./zodios.types";
import { PluginId } from "./plugins";
import { Narrow, ReadonlyDeep } from "./utils.types";
/**
 * zodios api client based on axios
 */
export declare class ZodiosClass<Api extends ZodiosEnpointDescriptions> {
    private axiosInstance;
    readonly options: ZodiosOptions;
    readonly api: Api;
    private endpointPlugins;
    /**
     * constructor
     * @param baseURL - the base url to use - if omited will use the browser domain
     * @param api - the description of all the api endpoints
     * @param options - the options to setup the client API
     * @example
     *   const apiClient = new Zodios("https://jsonplaceholder.typicode.com", [
     *     {
     *       method: "get",
     *       path: "/users",
     *       description: "Get all users",
     *       parameters: [
     *         {
     *           name: "q",
     *           type: "Query",
     *           schema: z.string(),
     *         },
     *         {
     *           name: "page",
     *           type: "Query",
     *           schema: z.string().optional(),
     *         },
     *       ],
     *       response: z.array(z.object({ id: z.number(), name: z.string() })),
     *     }
     *   ]);
     */
    constructor(api: Narrow<Api>, options?: ZodiosOptions);
    constructor(baseUrl: string, api: Narrow<Api>, options?: ZodiosOptions);
    private initPlugins;
    private getAnyEndpointPlugins;
    private findAliasEndpointPlugins;
    private findEnpointPlugins;
    /**
     * get the base url of the api
     */
    get baseURL(): string | undefined;
    /**
     * get the underlying axios instance
     */
    get axios(): AxiosInstance;
    /**
     * register a plugin to intercept the requests or responses
     * @param plugin - the plugin to use
     * @returns an id to allow you to unregister the plugin
     */
    use(plugin: ZodiosPlugin): PluginId;
    use<Alias extends keyof ZodiosAliases<Api>>(alias: Alias, plugin: ZodiosPlugin): PluginId;
    use<M extends Method, Path extends Paths<Api, M>>(method: M, path: Path, plugin: ZodiosPlugin): PluginId;
    /**
     * unregister a plugin
     * if the plugin name is provided instead of the registration plugin id,
     * it will unregister the plugin with that name only for non endpoint plugins
     * @param plugin - id of the plugin to remove
     */
    eject(plugin: PluginId | string): void;
    private injectAliasEndpoints;
    /**
     * make a request to the api
     * @param config - the config to setup zodios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    request<M extends Method, Path extends Paths<Api, M>, TConfig = ReadonlyDeep<ZodiosRequestOptions<Api, M, Path>>>(config: TConfig): Promise<Response<Api, M, Path>>;
    /**
     * make a get request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    get<Path extends Paths<Api, "get">, TConfig extends ZodiosMethodOptions<Api, "get", Path>>(path: Path, config?: ReadonlyDeep<TConfig>): Promise<Response<Api, "get", Path>>;
    /**
     * make a post request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    post<Path extends Paths<Api, "post">, TBody extends ReadonlyDeep<Body<Api, "post", Path>>, TConfig extends ReadonlyDeep<ZodiosMethodOptions<Api, "post", Path>>>(path: Path, data?: TBody, config?: TConfig): Promise<Response<Api, "post", Path>>;
    /**
     * make a put request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    put<Path extends Paths<Api, "put">, TBody extends ReadonlyDeep<Body<Api, "put", Path>>, TConfig extends ReadonlyDeep<ZodiosMethodOptions<Api, "put", Path>>>(path: Path, data?: TBody, config?: TConfig): Promise<Response<Api, "put", Path>>;
    /**
     * make a patch request to the api
     * @param path - the path to api endpoint
     * @param data - the data to send
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    patch<Path extends Paths<Api, "patch">, TBody extends ReadonlyDeep<Body<Api, "patch", Path>>, TConfig extends ReadonlyDeep<ZodiosMethodOptions<Api, "patch", Path>>>(path: Path, data?: TBody, config?: TConfig): Promise<Response<Api, "patch", Path>>;
    /**
     * make a delete request to the api
     * @param path - the path to api endpoint
     * @param config - the config to setup axios options and parameters
     * @returns response validated with zod schema provided in the api description
     */
    delete<Path extends Paths<Api, "delete">, TBody extends ReadonlyDeep<Body<Api, "delete", Path>>, TConfig extends ReadonlyDeep<ZodiosMethodOptions<Api, "delete", Path>>>(path: Path, data?: TBody, config?: TConfig): Promise<Response<Api, "delete", Path>>;
}
export declare type ZodiosInstance<Api extends ZodiosEnpointDescriptions> = ZodiosClass<Api> & ZodiosAliases<Api>;
export declare type ZodiosConstructor = {
    new <Api extends ZodiosEnpointDescriptions>(api: Narrow<Api>, options?: ZodiosOptions): ZodiosInstance<Api>;
    new <Api extends ZodiosEnpointDescriptions>(baseUrl: string, api: Narrow<Api>, options?: ZodiosOptions): ZodiosInstance<Api>;
};
export declare const Zodios: ZodiosConstructor;
/**
 * Get the Api description type from zodios
 * @param Z - zodios type
 */
export declare type ApiOf<Z> = Z extends ZodiosInstance<infer Api> ? Api : never;
