import { ZodiosEndpointDescription, ZodiosEndpointParameter, ZodiosEnpointDescriptions, ZodiosEndpointError } from "./zodios.types";
import z from "zod";
import { Narrow } from "./utils.types";
/**
 * check api for non unique paths
 * @param api - api to check
 * @return - nothing
 * @throws - error if api has non unique paths
 */
export declare function checkApi<T extends ZodiosEnpointDescriptions>(api: T): void;
/**
 * Simple helper to split your api definitions into multiple files
 * Mandatory to be used when declaring your endpoint definitions outside zodios constructor
 * to enable type inferrence and autocompletion
 * @param api - api definitions
 * @returns the api definitions
 */
export declare function makeApi<Api extends ZodiosEnpointDescriptions>(api: Narrow<Api>): Api;
/**
 * Simple helper to split your api definitions into multiple files
 * Mandatory to be used when declaring your endpoint definitions outside zodios constructor
 * to enable type inferrence and autocompletion
 * @param api - api definitions
 * @returns the api definitions
 * @deprecated - use makeApi instead
 */
export declare const asApi: typeof makeApi;
/**
 * Simple helper to split your parameter definitions into multiple files
 * Mandatory to be used when declaring parameters appart from your endpoint definitions
 * to enable type inferrence and autocompletion
 * @param params - api parameter definitions
 * @returns the api parameter definitions
 */
export declare function makeParameters<ParameterDescriptions extends ZodiosEndpointParameter[]>(params: Narrow<ParameterDescriptions>): ParameterDescriptions;
/**
 * Simple helper to split your parameter definitions into multiple files
 * Mandatory to be used when declaring parameters appart from your endpoint definitions
 * to enable type inferrence and autocompletion
 * @param params - api parameter definitions
 * @returns the api parameter definitions
 * @deprecated - use makeParameters instead
 */
export declare const asParameters: typeof makeParameters;
/**
 * Simple helper to split your error definitions into multiple files
 * Mandatory to be used when declaring errors appart from your endpoint definitions
 * to enable type inferrence and autocompletion
 * @param errors - api error definitions
 * @returns the error definitions
 */
export declare function makeErrors<ErrorDescription extends ZodiosEndpointError[]>(errors: Narrow<ErrorDescription>): ErrorDescription;
/**
 * Simple helper to split your error definitions into multiple files
 * Mandatory to be used when declaring errors appart from your endpoint definitions
 * to enable type inferrence and autocompletion
 * @param errors - api error definitions
 * @returns the error definitions
 * @deprecated - use makeErrors instead
 */
export declare const asErrors: typeof makeErrors;
export declare function makeEndpoint<T extends ZodiosEndpointDescription<any>>(endpoint: Narrow<T>): T;
export declare class Builder<T extends ZodiosEnpointDescriptions> {
    private api;
    constructor(api: T);
    addEndpoint<E extends ZodiosEndpointDescription>(endpoint: Narrow<E>): Builder<[...T, E]>;
    build(): T;
}
/**
 * Advanced helper to build your api definitions
 * compared to `asApi()` you'll have better autocompletion experience and better error messages,
 * @param endpoint
 * @returns - a builder to build your api definitions
 */
export declare function apiBuilder<T extends ZodiosEndpointDescription<any>>(endpoint: Narrow<T>): Builder<[T]>;
/**
 * Helper to generate a basic CRUD api for a given resource
 * @param resource - the resource to generate the api for
 * @param schema - the schema of the resource
 * @returns - the api definitions
 */
export declare function makeCrudApi<T extends string, S extends z.ZodObject<any>>(resource: T, schema: S): [{
    method: "get";
    path: `/${T}s`;
    alias: `get${Capitalize<T>}s`;
    description: `Get all ${T}s`;
    response: z.ZodArray<S, "many">;
}, {
    method: "get";
    path: `/${T}s/:id`;
    alias: `get${Capitalize<T>}`;
    description: `Get a ${T}`;
    response: S;
}, {
    method: "post";
    path: `/${T}s`;
    alias: `create${Capitalize<T>}`;
    description: `Create a ${T}`;
    parameters: [{
        name: "body";
        type: "Body";
        description: string;
        schema: z.ZodType<Partial<z.TypeOf<S>>, z.ZodTypeDef, Partial<z.TypeOf<S>>>;
    }];
    response: S;
}, {
    method: "put";
    path: `/${T}s/:id`;
    alias: `update${Capitalize<T>}`;
    description: `Update a ${T}`;
    parameters: [{
        name: "body";
        type: "Body";
        description: string;
        schema: S;
    }];
    response: S;
}, {
    method: "patch";
    path: `/${T}s/:id`;
    alias: `patch${Capitalize<T>}`;
    description: `Patch a ${T}`;
    parameters: [{
        name: "body";
        type: "Body";
        description: string;
        schema: z.ZodType<Partial<z.TypeOf<S>>, z.ZodTypeDef, Partial<z.TypeOf<S>>>;
    }];
    response: S;
}, {
    method: "delete";
    path: `/${T}s/:id`;
    alias: `delete${Capitalize<T>}`;
    description: `Delete a ${T}`;
    response: S;
}];
/**
 * Helper to generate a basic CRUD api for a given resource
 * @param resource - the resource to generate the api for
 * @param schema - the schema of the resource
 * @returns - the api definitions
 * @deprecated use makeCrudApi instead
 */
export declare const asCrudApi: typeof makeCrudApi;
