"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodiosPlugins = void 0;
/**
 * A list of plugins that can be used by the Zodios client.
 */
class ZodiosPlugins {
    /**
     * Constructor
     * @param method - http method of the endpoint where the plugins are registered
     * @param path - path of the endpoint where the plugins are registered
     */
    constructor(method, path) {
        this.plugins = [];
        this.key = `${method}-${path}`;
    }
    /**
     * Get the index of a plugin by name
     * @param name - name of the plugin
     * @returns the index of the plugin if found, -1 otherwise
     */
    indexOf(name) {
        return this.plugins.findIndex((p) => (p === null || p === void 0 ? void 0 : p.name) === name);
    }
    /**
     * register a plugin
     * if the plugin has a name it will be replaced if it already exists
     * @param plugin - plugin to register
     * @returns unique id of the plugin
     */
    use(plugin) {
        if (plugin.name) {
            const id = this.indexOf(plugin.name);
            if (id !== -1) {
                this.plugins[id] = plugin;
                return { key: this.key, value: id };
            }
        }
        this.plugins.push(plugin);
        return { key: this.key, value: this.plugins.length - 1 };
    }
    /**
     * unregister a plugin
     * @param plugin - plugin to unregister
     */
    eject(plugin) {
        if (typeof plugin === "string") {
            const id = this.indexOf(plugin);
            if (id === -1) {
                throw new Error(`Plugin with name '${plugin}' not found`);
            }
            this.plugins[id] = undefined;
        }
        else {
            if (plugin.key !== this.key) {
                throw new Error(`Plugin with key '${plugin.key}' is not registered for endpoint '${this.key}'`);
            }
            this.plugins[plugin.value] = undefined;
        }
    }
    /**
     * Intercept the request config by applying all plugins
     * before using it to send a request to the server
     * @param config - request config
     * @returns the modified config
     */
    interceptRequest(api, config) {
        return __awaiter(this, void 0, void 0, function* () {
            let pluginConfig = config;
            for (const plugin of this.plugins) {
                if (plugin === null || plugin === void 0 ? void 0 : plugin.request) {
                    pluginConfig = yield plugin.request(api, pluginConfig);
                }
            }
            return pluginConfig;
        });
    }
    /**
     * Intercept the response from server by applying all plugins
     * @param api - endpoint descriptions
     * @param config - request config
     * @param response - response from the server
     * @returns the modified response
     */
    interceptResponse(api, config, response) {
        return __awaiter(this, void 0, void 0, function* () {
            let pluginResponse = response;
            for (const plugin of this.plugins.reverse()) {
                if (plugin) {
                    pluginResponse = pluginResponse.then((plugin === null || plugin === void 0 ? void 0 : plugin.response)
                        ? (res) => plugin.response(api, config, res)
                        : undefined, (plugin === null || plugin === void 0 ? void 0 : plugin.error) ? (err) => plugin.error(api, config, err) : undefined);
                }
            }
            return pluginResponse;
        });
    }
    /**
     * Get the number of plugins registered
     * @returns the number of plugins registered
     */
    count() {
        return this.plugins.reduce((count, plugin) => (plugin ? count + 1 : count), 0);
    }
}
exports.ZodiosPlugins = ZodiosPlugins;
