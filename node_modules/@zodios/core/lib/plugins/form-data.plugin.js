"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formDataPlugin = void 0;
const utils_node_1 = require("../utils.node");
const zodios_error_1 = require("../zodios-error");
const plugin = {
    name: "form-data",
    request: (_, config) => __awaiter(void 0, void 0, void 0, function* () {
        if (typeof config.data !== "object" || Array.isArray(config.data)) {
            throw new zodios_error_1.ZodiosError("Zodios: multipart/form-data body must be an object", config);
        }
        const result = yield (0, utils_node_1.getFormDataStream)(config.data);
        return Object.assign(Object.assign({}, config), { data: result.data, headers: Object.assign(Object.assign({}, config.headers), result.headers) });
    }),
};
/**
 * form-data plugin used internally by Zodios.
 * @example
 * ```typescript
 *   const apiClient = new Zodios(
 *     "https://mywebsite.com",
 *     [{
 *       method: "post",
 *       path: "/upload",
 *       alias: "upload",
 *       description: "Upload a file",
 *       requestFormat: "form-data",
 *       parameters:[
 *         {
 *           name: "body",
 *           type: "Body",
 *           schema: z.object({
 *             file: z.instanceof(File),
 *           }),
 *         }
 *       ],
 *       response: z.object({
 *         id: z.number(),
 *       }),
 *     }],
 *   );
 *   const id = await apiClient.upload({ file: document.querySelector('#file').files[0] });
 * ```
 * @returns form-data plugin
 */
function formDataPlugin() {
    return plugin;
}
exports.formDataPlugin = formDataPlugin;
