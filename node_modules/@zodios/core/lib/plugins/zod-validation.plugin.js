"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zodValidationPlugin = void 0;
const zodios_error_1 = require("../zodios-error");
const zodios_plugins_utils_1 = require("./zodios-plugins.utils");
const plugin = {
    name: "zod-validation",
    request: (api, config) => __awaiter(void 0, void 0, void 0, function* () {
        const endpoint = (0, zodios_plugins_utils_1.findEndpoint)(api, config.method, config.url);
        if (!endpoint) {
            throw new Error(`No endpoint found for ${config.method} ${config.url}`);
        }
        const { parameters } = endpoint;
        if (!parameters) {
            return config;
        }
        const conf = Object.assign(Object.assign({}, config), { queries: Object.assign({}, config.queries), headers: Object.assign({}, config.headers) });
        const paramsOf = {
            Query: (name) => { var _a; return (_a = conf.queries) === null || _a === void 0 ? void 0 : _a[name]; },
            Body: (_) => conf.data,
            Header: (name) => { var _a; return (_a = conf.headers) === null || _a === void 0 ? void 0 : _a[name]; },
        };
        const setParamsOf = {
            Query: (name, value) => (conf.queries[name] = value),
            Body: (_, value) => (conf.data = value),
            Header: (name, value) => (conf.headers[name] = value),
        };
        for (const parameter of parameters) {
            const { name, schema, type } = parameter;
            const value = paramsOf[type](name);
            if (value) {
                const parsed = yield schema.safeParseAsync(value);
                if (!parsed.success) {
                    throw new zodios_error_1.ZodiosError(`Zodios: Invalid ${type} parameter '${name}'`, config, value, parsed.error);
                }
                setParamsOf[type](name, parsed.data);
            }
        }
        return conf;
    }),
    response: (api, config, response) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const endpoint = (0, zodios_plugins_utils_1.findEndpoint)(api, config.method, config.url);
        /* istanbul ignore next */
        if (!endpoint) {
            throw new Error(`No endpoint found for ${config.method} ${config.url}`);
        }
        if ((_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) === null || _b === void 0 ? void 0 : _b.includes("application/json")) {
            const parsed = yield endpoint.response.safeParseAsync(response.data);
            if (!parsed.success) {
                throw new zodios_error_1.ZodiosError(`Zodios: Invalid response from endpoint '${endpoint.method} ${endpoint.path}'\nstatus: ${response.status} ${response.statusText}\ncause:\n${parsed.error.message}\nreceived:\n${JSON.stringify(response.data, null, 2)}`, config, response.data, parsed.error);
            }
            response.data = parsed.data;
        }
        return response;
    }),
};
/**
 * Zod validation plugin used internally by Zodios.
 * By default zodios always validates the response.
 * @returns zod-validation plugin
 */
function zodValidationPlugin() {
    return plugin;
}
exports.zodValidationPlugin = zodValidationPlugin;
