import { AxiosResponse } from "axios";
import { ReadonlyDeep } from "../utils.types";
import { AnyZodiosRequestOptions, Method, ZodiosEnpointDescriptions, ZodiosPlugin } from "../zodios.types";
export declare type PluginId = {
    key: string;
    value: number;
};
/**
 * A list of plugins that can be used by the Zodios client.
 */
export declare class ZodiosPlugins {
    readonly key: string;
    private plugins;
    /**
     * Constructor
     * @param method - http method of the endpoint where the plugins are registered
     * @param path - path of the endpoint where the plugins are registered
     */
    constructor(method: Method | "any", path: string);
    /**
     * Get the index of a plugin by name
     * @param name - name of the plugin
     * @returns the index of the plugin if found, -1 otherwise
     */
    indexOf(name: string): number;
    /**
     * register a plugin
     * if the plugin has a name it will be replaced if it already exists
     * @param plugin - plugin to register
     * @returns unique id of the plugin
     */
    use(plugin: ZodiosPlugin): PluginId;
    /**
     * unregister a plugin
     * @param plugin - plugin to unregister
     */
    eject(plugin: PluginId | string): void;
    /**
     * Intercept the request config by applying all plugins
     * before using it to send a request to the server
     * @param config - request config
     * @returns the modified config
     */
    interceptRequest(api: ZodiosEnpointDescriptions, config: ReadonlyDeep<AnyZodiosRequestOptions>): Promise<import("../utils.types").DeepReadonlyObject<{
        method: Method;
        url: string;
        params?: Record<string, unknown> | undefined;
        queries?: Record<string, unknown> | undefined;
        headers?: Record<string, string> | undefined;
        signal?: AbortSignal | undefined;
        data?: any;
        auth?: import("axios").AxiosBasicCredentials | undefined;
        timeout?: number | undefined;
        transformRequest?: import("axios").AxiosRequestTransformer | import("axios").AxiosRequestTransformer[] | undefined;
        transformResponse?: import("axios").AxiosResponseTransformer | import("axios").AxiosResponseTransformer[] | undefined;
        paramsSerializer?: ((params: any) => string) | undefined;
        timeoutErrorMessage?: string | undefined;
        withCredentials?: boolean | undefined;
        adapter?: import("axios").AxiosAdapter | undefined;
        responseType?: import("axios").ResponseType | undefined;
        responseEncoding?: string | undefined;
        xsrfCookieName?: string | undefined;
        xsrfHeaderName?: string | undefined;
        onUploadProgress?: ((progressEvent: any) => void) | undefined;
        onDownloadProgress?: ((progressEvent: any) => void) | undefined;
        maxContentLength?: number | undefined;
        validateStatus?: ((status: number) => boolean) | null | undefined;
        maxBodyLength?: number | undefined;
        maxRedirects?: number | undefined;
        beforeRedirect?: ((options: Record<string, any>, responseDetails: {
            headers: Record<string, string>;
        }) => void) | undefined;
        socketPath?: string | null | undefined;
        httpAgent?: any;
        httpsAgent?: any;
        proxy?: false | import("axios").AxiosProxyConfig | undefined;
        cancelToken?: import("axios").CancelToken | undefined;
        decompress?: boolean | undefined;
        transitional?: import("axios").TransitionalOptions | undefined;
        insecureHTTPParser?: boolean | undefined;
        env?: {
            FormData?: (new (...args: any[]) => object) | undefined;
        } | undefined;
    }>>;
    /**
     * Intercept the response from server by applying all plugins
     * @param api - endpoint descriptions
     * @param config - request config
     * @param response - response from the server
     * @returns the modified response
     */
    interceptResponse(api: ZodiosEnpointDescriptions, config: ReadonlyDeep<AnyZodiosRequestOptions>, response: Promise<AxiosResponse>): Promise<AxiosResponse<any, any>>;
    /**
     * Get the number of plugins registered
     * @returns the number of plugins registered
     */
    count(): number;
}
